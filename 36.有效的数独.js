// 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。

// 数字 1-9 在每一行只能出现一次。
// 数字 1-9 在每一列只能出现一次。
// 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。

https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png
// 上图是一个部分填充的有效的数独。

// 数独部分空格内已填入了数字，空白格用 '.' 表示。

// 示例 1:

// 输入:
// [
//   ["5","3",".",".","7",".",".",".","."],
//   ["6",".",".","1","9","5",".",".","."],
//   [".","9","8",".",".",".",".","6","."],
//   ["8",".",".",".","6",".",".",".","3"],
//   ["4",".",".","8",".","3",".",".","1"],
//   ["7",".",".",".","2",".",".",".","6"],
//   [".","6",".",".",".",".","2","8","."],
//   [".",".",".","4","1","9",".",".","5"],
//   [".",".",".",".","8",".",".","7","9"]
// ]
// 输出: true
// 示例 2:

// 输入:
// [
//   ["8","3",".",".","7",".",".",".","."],
//   ["6",".",".","1","9","5",".",".","."],
//   [".","9","8",".",".",".",".","6","."],
//   ["8",".",".",".","6",".",".",".","3"],
//   ["4",".",".","8",".","3",".",".","1"],
//   ["7",".",".",".","2",".",".",".","6"],
//   [".","6",".",".",".",".","2","8","."],
//   [".",".",".","4","1","9",".",".","5"],
//   [".",".",".",".","8",".",".","7","9"]
// ]
// 输出: false
// 解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
//      但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
// 说明:

// 一个有效的数独（部分已被填充）不一定是可解的。
// 只需要根据以上规则，验证已经填入的数字是否有效即可。
// 给定数独序列只包含数字 1-9 和字符 '.' 。
// 给定数独永远是 9x9 形式的。

// 来源：力扣（LeetCode）
// 链接：https://leetcode-cn.com/problems/valid-sudoku
// 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
/**
 * @param {character[][]} board
 * @return {boolean}
 */
// var isValidSudoku = function (board) {
//   for (var i = 0; i < 9; i++) {
//     let is1 = []
//     let is2 = []
//     let is3 = []
//     for (var j = 0; j < 9; j++) {
//       if (board[i][j] != '.') {
//         is1.push(board[i][j])
//       }
//       if (board[j][i] != '.') {
//         is2.push(board[j][i])
//       }
//       let x = (Math.floor(j / 3) + Math.floor(i / 3) * 3)
//       let y = j%3+Math.floor(i%3)*3
//       if (board[x][y] != '.') {
//         is3.push(board[x][y])
//       }
//     }
//     let set = new Set(is1)
//     if (set.size != is1.length) {
//       return false;
//     }
//     set = new Set(is2)
//     if (set.size != is2.length) {
//       return false;
//     }
//     set = new Set(is3)
//     if (set.size != is3.length) {
//       return false;
//     }
//   }
//   return true;
// };
var isValidSudoku = function (board) {
  let map = {}
  for (let i = 0; i < 9; i++) {
    for (let j = 0; j < 9; j++) {
      let num = board[i][j]
      if (num == '.') continue
      if (num in map) {
        if (map[num].row.includes(i) || map[num].col.includes(j) || map[num].space.includes(Math.floor(j / 3) + Math.floor(i / 3) * 3)) {
          return false
        } else {
          map[num].row.push(i)
          map[num].col.push(j)
          map[num].space.push(Math.floor(j / 3) + Math.floor(i / 3) * 3)
        }
      } else {
        map[num] = {
          row: [i],
          col: [j],
          space:[Math.floor(j / 3) + Math.floor(i / 3) * 3]
        }
      }
    }
  }
  return true;
};
console.log(isValidSudoku([["5", "3", ".", ".", "7", ".", ".", ".", "."], ["6", ".", ".", "1", "9", "5", ".", ".", "."], [".", "9", "8", ".", ".", ".", ".", "6", "."], ["8", ".", ".", ".", "6", ".", ".", ".", "3"], ["4", ".", ".", "8", ".", "3", ".", ".", "1"], ["7", ".", ".", ".", "2", ".", ".", ".", "6"], [".", "6", ".", ".", ".", ".", "2", "8", "."], [".", ".", ".", "4", "1", "9", ".", ".", "5"], [".", ".", ".", ".", "8", ".", ".", "7", "9"]]))
console.log(isValidSudoku([
    ["8","3",".",".","7",".",".",".","."],
    ["6",".",".","1","9","5",".",".","."],
    [".","9","8",".",".",".",".","6","."],
    ["8",".",".",".","6",".",".",".","3"],
    ["4",".",".","8",".","3",".",".","1"],
    ["7",".",".",".","2",".",".",".","6"],
    [".","6",".",".",".",".","2","8","."],
    [".",".",".","4","1","9",".",".","5"],
    [".",".",".",".","8",".",".","7","9"]
  ]))
// [00 01 02 10 11 12 20 21 22]
// [04 05 06 14 15 16 24 25 26]
// for (var i = 0; i < 9; i++) {
//   var b =[]
//   for (var j = 0; j < 9; j++) {
//     b.push()
//   }
//   console.log(b.join(","))
// }
